#!/usr/sbin/nft -f

# Определяем интерфейсы LAN и WAN
define lan = enp7s0
define wan = wlp2s0

# Определяем сервисы, которые хотим разрешить или запретить
set services {
	type inet_service
	elements = { ssh, http, https }
}

# Создаем таблицу services для определения сервисов
table ip services {
  # Создаем множество web_services, которое содержит http и https
  set web_services {
    type inet_service; flags interval;
    elements = { http, https }
  }

  # Создаем множество mail_services, которое содержит smtp, pop3 и imap
  set mail_services {
    type inet_service; flags interval;
    elements = { smtp, pop3, imap }
  }

  # Создаем множество vpn_services, которое содержит openvpn и wireguard
  set vpn_services {
    type inet_service; flags interval;
    elements = { openvpn, wireguard }
  }

  # Создаем множество ssh_service, которое содержит только ssh
  set ssh_service {
    type inet_service; flags interval;
    elements = { ssh }
  }
}


# Определяем пользователей и группы, которым хотим дать разные разрешения
# Вместо MAC-адресов используем UID и GID
set users {
	type uid
	elements = { 1000 : "alice", 1001 : "bob", 1002 : "charlie", 1003 : "dave", 1004 : "eve", 1005 : "frank", 1006 : "grace", 1007 : "harry" }
}

set groups {
	type gid
	elements = { 1000 : "admins", 1001 : "users", 1002 : "guests" }
}

# Определяем хосты LAN с разными IP-адресами и соответствующими им пользователями
set hosts {
	type ipv4_addr . uid
	elements = { 192.168.1.10 . 1000 : "alice-pc", 192.168.1.20 . 1001 : "bob-pc", 192.168.1.30 . 1002 : "charlie-pc", 192.168.1.40 . 1003 : "dave-pc", 192.168.1.50 . 1004 : "eve-pc", 192.168.1.60 . 1005 : "frank-pc", 192.168.1.70 . 1006 : "grace-pc", 192.168.1.80 . 1007 : "harry-pc" }
}

# Определяем подсети LAN с разными масками
set subnets {
	type ipv4_addr
	flags interval
	elements = { 192.168.1.0/25 : "subnet1", 192.168.1.128/25 : "subnet2" }
}

# Создаем таблицу filter для фильтрации пакетов IPv4
table ip filter {

  # Для входящего трафика, в зависимости от интерфейса, переходим к цепочкам input_lan или input_wan
  chain input {
    type filter hook input priority 0; policy drop;
    iifname $lan jump input_lan
    iifname $wan jump input_wan
  }

  # Для исходящего трафика, в зависимости от интерфейса, переходим к цепочкам output_lan или output_wan
  chain output {
    type filter hook output priority 0; policy drop;
    oifname $lan jump output_lan
    oifname $wan jump output_wan
  }

  # Для трафика, который проходит через наш хост, переходим к цепочке forward
  chain forward {
    type filter hook forward priority 0; policy drop;
    jump forward_filter
  }

  # Разрешаем входящий трафик по LAN для хостов, соответствующих пользователям
  chain input_lan {
    # Например, разрешаем все пакеты от хостов LAN
    ip saddr 192.168.1.0/24 accept
    # Например, разрешаем пакеты от alice к web-сервисам
    owner uid @users alice tcp dport @services http,https accept
    # Например, разрешаем пакеты от группы guests к mail-сервисам
    owner gid @groups guests tcp dport @services smtp,pop3,imap accept
  }

  # Разрешаем входящий трафик по WAN только для alice и группы admins
  chain input_wan {
    # Например, разрешаем только установленные и связанные соединения
    ct state established,related accept
    # Используем модуль xt_owner для проверки UID и GID
    owner uid @users alice accept
    owner gid @groups admins accept
  }

  # Разрешаем исходящий трафик по LAN для хостов, соответствующих пользователям
  chain output_lan {
    # Например, разрешаем все пакеты к хостам LAN
    ip daddr 192.168.1.0/24 accept
    # Используем модуль xt_owner для проверки UID и GID
    owner uid @users bob accept
    owner gid @groups users accept
    # Используем перенаправление на LAN или к определенному хосту в LAN
    # Например, перенаправляем пакеты от charlie к хосту 192.168.1.100
    owner uid @users charlie jump redirect_lan
    # Например, перенаправляем пакеты от dave к хосту с MAC-адресом 00:11:22:33:44:55
    owner uid @users dave jump redirect_mac
    # Например, перенаправляем пакеты от eve к подсети subnet1
    owner uid @users eve jump redirect_subnet
  }

  # Разрешаем исходящий трафик по WAN только для bob и группы users, и только для определенных сервисов
  chain output_wan {
    # Например, разрешаем пакеты к web-сервисам
    tcp dport @services http,https accept
    # Используем модуль xt_owner для проверки UID и GID
    owner uid @users bob accept
    owner gid @groups users accept
    # Например, разрешаем пакеты к mail-сервисам
    tcp dport @services smtp,pop3,imap accept
    # Используем модуль xt_owner для проверки UID и GID
    owner uid @users frank accept
    owner gid @groups guests accept
    # Например, разрешаем пакеты к vpn-сервисам
    tcp dport @services openvpn,wireguard accept
    # Используем модуль xt_owner для проверки UID и GID
    owner uid @users grace accept
    owner gid @groups admins accept
    # Например, разрешаем пакеты к ssh-сервису
    tcp dport @services ssh accept
    # Используем модуль xt_owner для проверки UID и GID
    owner uid @users harry accept
    owner gid @groups users accept
  }

  # Создаем цепочку forward_filter для фильтрации трафика, который проходит через наш хост
  chain forward_filter {
    # Например, разрешаем трафик от harry к хосту 192.168.1.200
    owner uid @users harry ip daddr 192.168.1.200 accept
    # Например, разрешаем трафик от группы guests к хосту 192.168.1.250
    owner gid @groups guests ip daddr 192.168.1.250 accept
  }

  # Создаем цепочку redirect_lan для перенаправления пакетов на LAN
  chain redirect_lan {
    # Например, перенаправляем пакеты на хост 192.168.1.100
    ip daddr set 192.168.1.100
  }

  # Создаем цепочку redirect_mac для перенаправления пакетов на MAC-адрес
  chain redirect_mac {
    # Например, перенаправляем пакеты на хост с MAC-адресом 00:11:22:33:44:55
    ether daddr set 00:11:22:33:44:55
  }

  # создаем цепочку redirect_subnet для перенаправления пакетов на подсеть
  chain redirect_subnet {
    # например, перенаправляем пакеты на подсеть subnet1
    ip daddr set 192.168.1.0/25
  }
}
